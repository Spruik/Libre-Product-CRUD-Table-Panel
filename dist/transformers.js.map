{"version":3,"sources":["../src/transformers.js"],"names":["transformDataToTable","data","panel","model","TableModel","length","transformer","transformers","transform","err","message","_","flatten","TimeSeries","timeseries_to_rows","description","getColumns","columns","text","type","i","series","y","datapoints","dp","rows","push","target","timeseries_to_columns","points","timeKey","toString","time","point","values","value","timeseries_aggregations","alias","getFlotPairs","cells","stats","annotations","evt","title","tags","table","columnNames","reduce","acc","forEach","col","undefined","noTableIndex","findIndex","d","String","fromCharCode","json","names","maxDocs","Math","min","doc","flattened","propName","map","key","z","column","tableCol","filterable","isObject","JSON","stringify"],"mappings":"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","file":"transformers.js","sourcesContent":["import _ from 'lodash'\r\nimport flatten from 'app/core/utils/flatten'\r\nimport TimeSeries from 'app/core/time_series2'\r\nimport TableModel from 'app/core/table_model'\r\n\r\nconst transformers = {}\r\n\r\ntransformers.timeseries_to_rows = {\r\n  description: 'Time series to rows',\r\n  getColumns: () => {\r\n    return []\r\n  },\r\n  transform: (data, panel, model) => {\r\n    model.columns = [{ text: 'Time', type: 'date' }, { text: 'Metric' }, { text: 'Value' }]\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const series = data[i]\r\n      for (let y = 0; y < series.datapoints.length; y++) {\r\n        const dp = series.datapoints[y]\r\n        model.rows.push([dp[1], series.target, dp[0]])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ntransformers.timeseries_to_columns = {\r\n  description: 'Time series to columns',\r\n  getColumns: () => {\r\n    return []\r\n  },\r\n  transform: (data, panel, model) => {\r\n    model.columns.push({ text: 'Time', type: 'date' })\r\n\r\n    // group by time\r\n    const points = {}\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const series = data[i]\r\n      model.columns.push({ text: series.target })\r\n\r\n      for (let y = 0; y < series.datapoints.length; y++) {\r\n        const dp = series.datapoints[y]\r\n        const timeKey = dp[1].toString()\r\n\r\n        if (!points[timeKey]) {\r\n          points[timeKey] = { time: dp[1] }\r\n          points[timeKey][i] = dp[0]\r\n        } else {\r\n          points[timeKey][i] = dp[0]\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const time in points) {\r\n      const point = points[time]\r\n      const values = [point.time]\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        const value = point[i]\r\n        values.push(value)\r\n      }\r\n\r\n      model.rows.push(values)\r\n    }\r\n  }\r\n}\r\n\r\ntransformers.timeseries_aggregations = {\r\n  description: 'Time series aggregations',\r\n  getColumns: () => {\r\n    return [\r\n      { text: 'Avg', value: 'avg' },\r\n      { text: 'Min', value: 'min' },\r\n      { text: 'Max', value: 'max' },\r\n      { text: 'Total', value: 'total' },\r\n      { text: 'Current', value: 'current' },\r\n      { text: 'Count', value: 'count' }\r\n    ]\r\n  },\r\n  transform: (data, panel, model) => {\r\n    let i, y\r\n    model.columns.push({ text: 'Metric' })\r\n\r\n    for (i = 0; i < panel.columns.length; i++) {\r\n      model.columns.push({ text: panel.columns[i].text })\r\n    }\r\n\r\n    for (i = 0; i < data.length; i++) {\r\n      const series = new TimeSeries({\r\n        datapoints: data[i].datapoints,\r\n        alias: data[i].target\r\n      })\r\n\r\n      series.getFlotPairs('connected')\r\n      const cells = [series.alias]\r\n\r\n      for (y = 0; y < panel.columns.length; y++) {\r\n        cells.push(series.stats[panel.columns[y].value])\r\n      }\r\n\r\n      model.rows.push(cells)\r\n    }\r\n  }\r\n}\r\n\r\ntransformers.annotations = {\r\n  description: 'Annotations',\r\n  getColumns: () => {\r\n    return []\r\n  },\r\n  transform: (data, panel, model) => {\r\n    model.columns.push({ text: 'Time', type: 'date' })\r\n    model.columns.push({ text: 'Title' })\r\n    model.columns.push({ text: 'Text' })\r\n    model.columns.push({ text: 'Tags' })\r\n\r\n    if (!data || !data.annotations || data.annotations.length === 0) {\r\n      return\r\n    }\r\n\r\n    for (let i = 0; i < data.annotations.length; i++) {\r\n      const evt = data.annotations[i]\r\n      model.rows.push([evt.time, evt.title, evt.text, evt.tags])\r\n    }\r\n  }\r\n}\r\n\r\ntransformers.table = {\r\n  description: 'Table',\r\n  getColumns: data => {\r\n    if (!data || data.length === 0) {\r\n      return []\r\n    }\r\n    // Single query returns data columns as is\r\n    if (data.length === 1) {\r\n      return [...data[0].columns]\r\n    }\r\n\r\n    // Track column indexes: name -> index\r\n    const columnNames = {}\r\n\r\n    // Union of all columns\r\n    const columns = data.reduce((acc, series) => {\r\n      series.columns.forEach(col => {\r\n        const { text } = col\r\n        if (columnNames[text] === undefined) {\r\n          columnNames[text] = acc.length\r\n          acc.push(col)\r\n        }\r\n      })\r\n      return acc\r\n    }, [])\r\n\r\n    return columns\r\n  },\r\n  transform: (data, panel, model) => {\r\n    if (!data || data.length === 0) {\r\n      return\r\n    }\r\n\r\n    const noTableIndex = _.findIndex(data, d => d.type !== 'table')\r\n    if (noTableIndex > -1) {\r\n      const err = {\r\n        message: `Result of query #${String.fromCharCode(\r\n          65 + noTableIndex\r\n        )} is not in table format, try using another transform.`\r\n      }\r\n      throw err\r\n    }\r\n\r\n    // mergeTablesIntoModel(model, ...data);\r\n\r\n    model.columns = data[0].columns\r\n    model.rows = data[0].rows\r\n  }\r\n}\r\n\r\ntransformers.json = {\r\n  description: 'JSON Data',\r\n  getColumns: data => {\r\n    if (!data || data.length === 0) {\r\n      return []\r\n    }\r\n\r\n    const names = {}\r\n    for (let i = 0; i < data.length; i++) {\r\n      const series = data[i]\r\n      if (series.type !== 'docs') {\r\n        continue\r\n      }\r\n\r\n      // only look at 100 docs\r\n      const maxDocs = Math.min(series.datapoints.length, 100)\r\n      for (let y = 0; y < maxDocs; y++) {\r\n        const doc = series.datapoints[y]\r\n        const flattened = flatten(doc, null)\r\n        for (const propName in flattened) {\r\n          names[propName] = true\r\n        }\r\n      }\r\n    }\r\n\r\n    return _.map(names, (value, key) => {\r\n      return { text: key, value: key }\r\n    })\r\n  },\r\n  transform: (data, panel, model) => {\r\n    let i, y, z\r\n\r\n    for (const column of panel.columns) {\r\n      const tableCol = { text: column.text }\r\n\r\n      // if filterable data then set columns to filterable\r\n      if (data.length > 0 && data[0].filterable) {\r\n        tableCol.filterable = true\r\n      }\r\n\r\n      model.columns.push(tableCol)\r\n    }\r\n\r\n    if (model.columns.length === 0) {\r\n      model.columns.push({ text: 'JSON' })\r\n    }\r\n\r\n    for (i = 0; i < data.length; i++) {\r\n      const series = data[i]\r\n\r\n      for (y = 0; y < series.datapoints.length; y++) {\r\n        const dp = series.datapoints[y]\r\n        const values = []\r\n\r\n        if (_.isObject(dp) && panel.columns.length > 0) {\r\n          const flattened = flatten(dp, null)\r\n          for (z = 0; z < panel.columns.length; z++) {\r\n            values.push(flattened[panel.columns[z].value])\r\n          }\r\n        } else {\r\n          values.push(JSON.stringify(dp))\r\n        }\r\n\r\n        model.rows.push(values)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction transformDataToTable (data, panel) {\r\n  const model = new TableModel()\r\n\r\n  if (!data || data.length === 0) {\r\n    return model\r\n  }\r\n\r\n  const transformer = transformers[panel.transform]\r\n  if (!transformer) {\r\n    const err = { message: 'Transformer ' + panel.transform + ' not found' }\r\n    throw err\r\n  }\r\n\r\n  transformer.transform(data, panel, model)\r\n  return model\r\n}\r\n\r\nexport { transformers, transformDataToTable }\r\n"]}