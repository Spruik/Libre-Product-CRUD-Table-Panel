{"version":3,"sources":["../src/apis.js"],"names":["getMaterialsToSendList","product","materialsToSend","apps","ingredient","applicators","i","length","app","operationId","k","materials","mat","push","product_id","id","material_id","materialId","operation_id","route_id","quantity","oz","grams_on_scale","gramsOnScale","grams_total","gramsTotal","quantity_uom","sub_sequence_id","seriseId","getProductToSend","comment","product_group","productGroup","product_desc","productDesc","utils","addProductGroup","groupName","success","fail","toSend","group_name","url","postgRestHost","post","JSON","stringify","then","catch","e","updateProductGroup","scope","toBeUpdated","update","toSend1","url1","currentFilterGroup","removeProductGroup","toBeRemoved","removeProductGroupurl","remove","productsByGroupNameUrl","get","ids","res","map","x","proimise","forEach","Promise","all","addProduct","productToSend","matUrl","updateProduct","originalId","originalIngredient","productUrl","hasObjectChanged","deleteUrl","promise","removeProduct"],"mappings":"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","file":"apis.js","sourcesContent":["import * as utils from './utils'\n\n/**\n * Send request to postgrest for adding a product group\n * @param {*} groupName The group name\n * @param {*} success The success controller\n * @param {*} fail The fail controller\n */\nexport const addProductGroup = (groupName, success, fail) => {\n  const toSend = { group_name: groupName }\n  const url = utils.postgRestHost + 'product_group'\n  utils.post(url, JSON.stringify(toSend)).then(res => {\n    success()\n  }).catch(e => {\n    fail(e)\n  })\n}\n\n/**\n * Send request to postgrest for updating a product group and all its children's product group name\n * @param {*} toBeUpdated The group to be updated\n * @param {*} groupName The group name\n * @param {*} success The success controller\n * @param {*} fail The fail controller\n */\nexport const updateProductGroup = (scope, toBeUpdated, groupName, success, fail) => {\n  const toSend = { group_name: groupName }\n  const url = `${utils.postgRestHost}product_group?group_name=eq.${toBeUpdated}`\n  utils.update(url, JSON.stringify(toSend)).then(res => {\n    const toSend1 = { product_group: groupName }\n    const url1 = `${utils.postgRestHost}product?product_group=eq.${toBeUpdated}`\n    utils.update(url1, JSON.stringify(toSend1)).then(() => {\n      scope.currentFilterGroup = groupName // update the current filter so that the filter input will not be empty\n      success()\n    }).catch(e => {\n      fail(e)\n    })\n  }).catch(e => {\n    fail(e)\n  })\n}\n\n/**\n * Send request to postgrest for removing a product group and all its children\n * @param {*} toBeRemoved The group to be removed\n * @param {*} success The success controller\n * @param {*} fail The fail controller\n */\nexport const removeProductGroup = (toBeRemoved, success, fail) => {\n  // first of all remove the product group\n  const removeProductGroupurl = `${utils.postgRestHost}product_group?group_name=eq.${toBeRemoved}`\n  utils.remove(removeProductGroupurl).then(() => {\n    // then use the 'toberemoved' to get the product id\n    const productsByGroupNameUrl = `${utils.postgRestHost}product?product_group=eq.${toBeRemoved}`\n    utils.get(productsByGroupNameUrl).then(res => {\n      const ids = res.map(x => x.id)\n      if(ids.length === 0){\n        //if cannot get anything\n        success()\n      }else {\n        //if can get something\n        // use the product group to remove the product\n        utils.remove(productsByGroupNameUrl).then(() => {\n          // use the product id to remove the material requirements\n          const proimise = []\n          ids.forEach(id => {\n            proimise.push(utils.remove(`${utils.postgRestHost}material_requirement?product_id=eq.${id}`))\n          })\n          Promise.all(proimise).then(() => {success()}).catch(e => {fail(e)})\n        }).catch(e => {fail(e)})\n      }\n    }).catch(e => {fail(e)})\n  }).catch(e => {fail(e)})\n}\n\n/**\n * Send request to postgrest for adding a product\n * @param {*} product The product to be inserted\n * @param {*} success What to do when the request is successful? give me a func\n * @param {*} fail What to do when the request is failed? give me a func\n */\nexport const addProduct = (product, success, fail) => {\n  const productToSend = getProductToSend(product)\n  const materialsToSend = getMaterialsToSendList(product)\n\n  const url = utils.postgRestHost + 'product'\n  const matUrl = utils.postgRestHost + 'material_requirement'\n  utils.post(url, JSON.stringify(productToSend)).then(() => {\n    utils.post(matUrl, JSON.stringify(materialsToSend)).then(() => {\n      success()\n    }).catch(e => {\n      fail(e)\n    })\n  }).catch(e => {\n    fail(e)\n  })\n}\n\n/**\n * Send request to postgrest for updating a product\n * @param {*} originalId The original id for locating the product to be updated\n * @param {*} originalIngredient The original ingredient\n * @param {*} product The new product data you get from the form\n * @param {*} success What to do when the request is successful? give me a func\n * @param {*} fail What to do when the request is failed? give me a func\n */\nexport const updateProduct = (originalId, originalIngredient, product, success, fail) => {\n  const productToSend = getProductToSend(product)\n  const productUrl = `${utils.postgRestHost}product?id=eq.${originalId}`\n\n  if (!utils.hasObjectChanged(originalIngredient, product.ingredient) && originalId === product.id) {\n    // ingredient not changed and id not changed just update the product table\n    utils.update(productUrl, JSON.stringify(productToSend)).then(() => {\n      success()\n    }).catch(e => {\n      fail(e)\n    })\n  }else {\n    // ingredient changed, update the product table \n    // remove all material requirements that match the product id\n    // re-insert the new material requirements\n    const materialsToSend = getMaterialsToSendList(product)\n    const deleteUrl = `${utils.postgRestHost}material_requirement?product_id=eq.${originalId}`\n    const matUrl = `${utils.postgRestHost}material_requirement`\n    const promise = [\n      utils.update(productUrl, JSON.stringify(productToSend)),\n      utils.remove(deleteUrl),\n    ]\n\n    Promise.all(promise).then(()=> {\n      utils.post(matUrl, JSON.stringify(materialsToSend)).then(()=> {\n        success()\n      }).catch(e => {\n        fail(e)\n      })\n    }).catch(e => {\n      fail(e)\n    })\n  }\n}\n\n/**\n * Send request to postgrest for removing a product\n * @param {*} id The id of the product to be removed\n * @param {*} success What to do when the request is successful? give me a func \n * @param {*} fail What to do when the request is failed? give me a func\n */\nexport const removeProduct = (id, success, fail) => {\n  const url = `${utils.postgRestHost}product?id=eq.${id}`\n  const matUrl = `${utils.postgRestHost}material_requirement?product_id=eq.${id}`\n\n  const promise = [\n    utils.remove(url),\n    utils.remove(matUrl)\n  ]\n\n  Promise.all(promise).then(() => {\n    success()\n  }).catch(e => {\n    fail(e)\n  })\n}\n\nfunction getMaterialsToSendList (product) {\n  const materialsToSend = []\n  const apps = product.ingredient.applicators\n  for (let i = 0; i < apps.length; i++) {\n    const app = apps[i];\n    const operationId = app.operationId\n    for (let k = 0; k < app.materials.length; k++) {\n      const mat = app.materials[k];\n      materialsToSend.push({\n        product_id: product.id,\n        material_id: mat.materialId,\n        operation_id: operationId,\n        route_id: null,\n        quantity: mat.oz,\n        grams_on_scale: mat.gramsOnScale,\n        grams_total: mat.gramsTotal,\n        quantity_uom: 'Oz',\n        sub_sequence_id: mat.seriseId\n      })\n    }\n  }\n  return materialsToSend\n}\n\nfunction getProductToSend (product) {\n  return {\n    id: product.id,\n    ingredient: product.ingredient,\n    comment: product.comment,\n    product_group: product.productGroup,\n    product_desc: product.productDesc\n  }\n}"]}