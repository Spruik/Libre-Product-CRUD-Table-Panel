{"version":3,"sources":["../src/apis.js"],"names":["utils","addProductGroup","groupName","success","fail","toSend","group_name","url","postgRestHost","post","JSON","stringify","then","catch","e","updateProductGroup","toBeUpdated","update","toSend1","product_group","url1","removeProductGroup","toBeRemoved","remove","addProduct","productGroup","productDesc","productId","comment","ingredient","product_id","product_desc","updateProduct","originalId","removeProduct","id"],"mappings":"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","file":"apis.js","sourcesContent":["import * as utils from './utils'\n\n/**\n * Send request to postgrest for adding a product group\n * @param {*} groupName The group name\n * @param {*} success The success controller\n * @param {*} fail The fail controller\n */\nexport const addProductGroup = (groupName, success, fail) => {\n  const toSend = { group_name: groupName }\n  const url = utils.postgRestHost + 'product_group'\n  utils.post(url, JSON.stringify(toSend)).then(res => {\n    success()\n  }).catch(e => {\n    fail(e)\n  })\n}\n\n/**\n * Send request to postgrest for updating a product group and all its children's product group name\n * @param {*} toBeUpdated The group to be updated\n * @param {*} groupName The group name\n * @param {*} success The success controller\n * @param {*} fail The fail controller\n */\nexport const updateProductGroup = (toBeUpdated, groupName, success, fail) => {\n  const toSend = { group_name: groupName }\n  const url = `${utils.postgRestHost}product_group?group_name=eq.${toBeUpdated}`\n  utils.update(url, JSON.stringify(toSend)).then(res => {\n    const toSend1 = { product_group: groupName }\n    const url1 = `${utils.postgRestHost}products?product_group=eq.${toBeUpdated}`\n    utils.update(url1, JSON.stringify(toSend1)).then(() => {\n      success()\n    }).catch(e => {\n      fail(e)\n    })\n  }).catch(e => {\n    fail(e)\n  })\n}\n\n/**\n * Send request to postgrest for removing a product group and all its children\n * @param {*} toBeRemoved The group to be removed\n * @param {*} success The success controller\n * @param {*} fail The fail controller\n */\nexport const removeProductGroup = (toBeRemoved, success, fail) => {\n  const url = `${utils.postgRestHost}product_group?group_name=eq.${toBeRemoved}`\n  utils.remove(url).then(() => {\n    const url1 = `${utils.postgRestHost}products?product_group=eq.${toBeRemoved}`\n    utils.remove(url1).then(() => {\n      success()\n    }).catch(e => {\n      fail(e)\n    })\n  }).catch(e => {\n    fail(e)\n  })\n}\n\n/**\n * Send request to postgrest for adding a product\n * @param {*} productGroup The group that this product belongs to\n * @param {*} productDesc The product desc\n * @param {*} productId The product id\n * @param {*} comment The comment for this product\n * @param {*} ingredient The ingredient of this product\n * @param {*} success What to do when the request is successful? give me a func\n * @param {*} fail What to do when the request is failed? give me a func\n */\nexport const addProduct = (productGroup, productDesc, productId, comment, ingredient, success, fail) => {\n  const toSend = {\n    product_id: productId,\n    product_desc: productDesc,\n    product_group: productGroup,\n    comment: comment || null,\n    ingredient: ingredient\n  }\n  const url = utils.postgRestHost + 'products'\n  utils.post(url, JSON.stringify(toSend)).then(res => {\n    success()\n  }).catch(e => {\n    fail(e)\n  })\n}\n\n/**\n * Send request to postgrest for updating a product\n * @param {*} originalId The original id for locating the product to be updated\n * @param {*} productGroup The new product group\n * @param {*} productDesc The new product desc\n * @param {*} productId The new product id\n * @param {*} comment The new comment\n * @param {*} ingredient The new ingredient\n * @param {*} success What to do when the request is successful? give me a func\n * @param {*} fail What to do when the request is failed? give me a func\n */\nexport const updateProduct = (originalId, productGroup, productDesc, productId, comment, ingredient, success, fail) => {\n  const toSend = {\n    product_id: productId,\n    product_desc: productDesc,\n    product_group: productGroup,\n    comment: comment || null,\n    ingredient: ingredient\n  }\n  const url = `${utils.postgRestHost}products?product_id=eq.${originalId}`\n  utils.update(url, JSON.stringify(toSend)).then(res => {\n    success()\n  }).catch(e => {\n    fail(e)\n  })\n}\n\n/**\n * Send request to postgrest for removing a product\n * @param {*} id The id of the product to be removed\n * @param {*} success What to do when the request is successful? give me a func \n * @param {*} fail What to do when the request is failed? give me a func\n */\nexport const removeProduct = (id, success, fail) => {\n  const url = `${utils.postgRestHost}products?product_id=eq.${id}`\n  utils.remove(url).then(res => {\n    success()\n  }).catch(e => {\n    fail(e)\n  })\n}"]}